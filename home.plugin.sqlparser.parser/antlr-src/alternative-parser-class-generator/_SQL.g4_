grammar SQL;

options {
    language = Java;
}

@header {package home.plugin.sqlparser.parser.antlr.generated;}

// We process here only four cases: 
//   SELECT t.c1, ..., t.cn FROM schema.table t;
//   SELECT t.c1, ..., t.cn AS k FROM (select_expresseion) t;
//   SELECT t.c1, ..., (select_expresseion) FROM schema.table t;
//   SELECT t.c1, ..., (select_expresseion) AS k FROM (select_expresseion) t;

sql
    : query SEMI_COLON EOF
    ;

query
    : select_stmt
    ;

select_stmt
    : SELECT col (COMMA col)* FROM from_item (LIMIT INTEGER_NUMBER)?
    ;

col
    : (alias DOT)? col_name (AS alias)?
    | LEFT_PAREN select_stmt RIGHT_PAREN (AS alias)?
    ;

from_item
    : (table_name | (LEFT_PAREN select_stmt RIGHT_PAREN)) alias?
    ;

col_name
    : STRING
    ;

alias
    : STRING
    ;

table_name
    : (STRING DOT)? STRING
    ;

AS : [aA] [sS];
FROM : [fF] [rR] [oO] [mM];
LIMIT : [lL] [iI] [mM] [iI] [tT]; 
SELECT : [sS] [eE] [lL] [eE] [cC] [tT];

SEMI_COLON : ';' ;
COMMA : ',' ;
DOT : '.' ;
LEFT_PAREN : '(' ;
RIGHT_PAREN : ')' ;

STRING
    : [0-9]*[a-zA-Z_$][a-zA-Z_$0-9]*
    ;

INTEGER_NUMBER
    : DIGIT+
    ;

fragment
DIGIT : ('0'..'9');

SPACE:          [ \t\r\n]+    -> channel(HIDDEN);
COMMENT_INPUT:  '/*' .*? '*/' -> channel(HIDDEN);
LINE_COMMENT:   ('-- ' | '#')
                ~[\r\n]*
                ('\r'? '\n' | EOF)
                              -> channel(HIDDEN);
